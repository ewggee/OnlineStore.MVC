@using OnlineStore.Contracts.Carts

@model CartDto

<h4>Корзина</h4>

@if (Model.Items.Count > 0)
{
    <table id="cart-table">
        <thead>
            <tr>
                <th class="cartItem">Название</th>
                <th class="cartItem">Количество</th>
                <th class="cartItem">Цена за шт.</th>
                <th class="cartItem">Всего</th>
                <th class="cartItem">Действие</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Items)
            {
                <tr>
                    <td class="cartItem">
                        <a asp-controller="Catalog" asp-action="GetProduct" asp-route-productId="@item.ProductId">
                            @item.ProductName
                        </a>
                    </td>
                    <td class="cartItem">
                        <input type="number" class="update-quantity" data-product-id="@item.ProductId" value="@item.Quantity" min="1">
                    </td>
                    <td class="cartItem" data-price="@item.Price">@item.Price.ToString("C")</td>
                    <td class="cartItem total-price" data-total-price="@(item.Quantity * item.Price)">@((item.Quantity * item.Price).ToString("C"))</td>
                    <td>
                        <form asp-action="RemoveFromCart" asp-route-productId="@item.ProductId" method="post">
                            <button class="btn btn-danger" type="submit">Удалить</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Итого: <span id="total-price">@Model.TotalPrice.ToString("C")</span></h2>

    <form asp-action="Checkout" method="post">
        <button class="btn btn-success" type="submit">Оформить заказ</button>
    </form>
}
else
{
    <h4>Ваша корзина пуста.</h4>
}

<style>
    /* Стили для таблицы корзины */
    #cart-table {
        width: 80%; /* Ширина таблицы */
        margin: 20px auto; /* Отступы от краев */
        border-collapse: collapse; /* Убираем пробелы между ячейками */
        font-family: sans-serif; /* Шрифт */
    }

        #cart-table th, #cart-table td {
            border: 1px solid #ddd; /* Границы ячеек */
            padding: 8px; /* Отступы внутри ячеек */
            text-align: left; /* Выравнивание текста по левому краю */
        }

        #cart-table th {
            background-color: #f2f2f2; /* Цвет заголовков */
            font-weight: bold; /* Жирный шрифт заголовков */
        }

        #cart-table .total-price {
            text-align: right; /* Выравнивание итоговой цены по правому краю */
        }

        #cart-table a {
            text-decoration: none; /* Убираем подчеркивание у ссылок */
            color: #337ab7; /* Цвет ссылок */
        }

            #cart-table a:hover {
                text-decoration: underline; /* Подчеркивание ссылок при наведении */
            }

</style>

<script>
    const updateQuantityInputs = document.querySelectorAll('.update-quantity');
    const totalPriceSpan = document.getElementById('total-price');
    const cartTable = document.getElementById('cart-table');

    updateQuantityInputs.forEach(input => {
        // сохраняем начальное значение для отката при ошибке
        input.dataset.previousValue = input.value;

        input.addEventListener('input', async () => {
            const productId = parseInt(input.dataset.productId, 10)
            const newQuantity = parseInt(input.value, 10);

            const response = await fetch(`@Url.Action("UpdateItemCount", "Cart")`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId: productId, newQuantity: newQuantity })
            });

            if (response.status === 400) {
                alert('Недопустимое количество товара!');
                location.reload();
                return;
            }

            input.dataset.previousValue = newQuantity;
            recalculateTotalPrice();
        });
    });

    // Функция для пересчета итоговой суммы (можно оптимизировать, если нужно)
    function recalculateTotalPrice() {
        let totalPrice = 0;
        const totalPrices = document.querySelectorAll('.total-price');
        totalPrices.forEach(element => {
            totalPrice += parseFloat(element.dataset.totalPrice);
        });
        totalPriceSpan.textContent = totalPrice.toLocaleString('ru-RU', { style: 'currency', currency: 'RUB' }); // или нужную валюту
    }

    // При изменении количества, пересчитываем "Всего" и "Итого"
    updateQuantityInputs.forEach(input => {
        input.addEventListener('input', () => {
            const row = input.closest('tr');
            const pricePerItem = parseFloat(row.querySelector('.cartItem[data-price]').dataset.price);
            const quantity = parseInt(input.value, 10);
            const totalPriceCell = row.querySelector('.total-price');
            totalPriceCell.dataset.totalPrice = (pricePerItem * quantity);
            totalPriceCell.textContent = (pricePerItem * quantity).toLocaleString('ru-RU', { style: 'currency', currency: 'RUB' });
            recalculateTotalPrice();
        });
    });
</script>
